generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("NEXT_PUBLIC_POSTGRES_PRISMA_URL")
}

model Profile {
  id          String  @id @default(uuid()) @db.Uuid
  role        Role    @default(user)
  searchValue String? @map("search_value")

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  workoutPrograms  WorkoutProgram[]
  workoutTemplates WorkoutTemplate[]
  exercises        Exercise[]
  WorkoutHistory   WorkoutHistory[]

  @@map("profile")
}

model WorkoutProgram {
  id        String    @id @default(uuid()) @db.Uuid
  index     Int       @unique @default(autoincrement())
  name      String
  startDate DateTime?
  endDate   DateTime?
  ownerId   String    @db.Uuid

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  owner                Profile                         @relation(fields: [ownerId], references: [id])
  workoutHistory       WorkoutHistory[]
  workoutTemplateLinks WorkoutProgramWorkoutTemplate[]

  @@map("workout_program")
}

model WorkoutTemplate {
  id      String @id @default(uuid()) @db.Uuid
  name    String
  ownerId String @db.Uuid

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  owner               Profile                         @relation(fields: [ownerId], references: [id])
  workoutProgramLinks WorkoutProgramWorkoutTemplate[]
  exercises           WorkoutTemplateExercise[]
  workoutHistory      WorkoutHistory[]

  @@map("workout_template")
}

model WorkoutHistory {
  id                String   @id @default(uuid()) @db.Uuid
  date              DateTime @default(now())
  ownerId           String   @db.Uuid
  workoutTemplateId String?  @db.Uuid
  workoutProgramId  String?  @db.Uuid // Ajout de la référence au programme
  name              String   @default("Séance libre")
  comment           String?
  isPublic          Boolean  @default(false)
  workoutPlace      String?
  duration          Int?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now()) @updatedAt

  owner           Profile                  @relation(fields: [ownerId], references: [id])
  workoutTemplate WorkoutTemplate?         @relation(fields: [workoutTemplateId], references: [id])
  workoutProgram  WorkoutProgram?          @relation(fields: [workoutProgramId], references: [id]) // Relation avec le programme
  exercises       WorkoutHistoryExercise[]

  @@map("workout_history")
}

model Exercise {
  id       String   @id @default(uuid()) @db.Uuid
  name     String
  isPublic Boolean  @default(false)
  ownerId  String?  @db.Uuid // Null si c'est un exercice public
  tags     String[] @default([])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  owner            Profile?                  @relation(fields: [ownerId], references: [id])
  workoutTemplates WorkoutTemplateExercise[]
  workoutHistories WorkoutHistoryExercise[]
  muscles          Muscle[]

  @@map("exercise")
}

model WorkoutProgramWorkoutTemplate {
  id                String @id @default(uuid()) @db.Uuid
  workoutProgramId  String @db.Uuid
  workoutTemplateId String @db.Uuid
  order             Int    @default(1) //Ordre de la séance dans le program

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  workoutProgram  WorkoutProgram  @relation(fields: [workoutProgramId], references: [id], onDelete: Cascade)
  workoutTemplate WorkoutTemplate @relation(fields: [workoutTemplateId], references: [id], onDelete: Cascade)

  @@unique([workoutProgramId, workoutTemplateId])
  @@map("workout_program_workout_template")
}

model WorkoutHistoryExercise {
  id               String  @id @default(uuid()) @db.Uuid
  workoutHistoryId String  @db.Uuid
  exerciseId       String  @db.Uuid
  comment          String?
  nbReps           Int[]
  weight           Int[]
  minReps          Int[] // Fourchette min par série
  maxReps          Int[] // Fourchette max par série
  restTime         Int[] // Temps de repos en secondes
  order            Int     @default(1)
  supersetId       String? @db.Uuid

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  workoutHistory WorkoutHistory @relation(fields: [workoutHistoryId], references: [id], onDelete: Cascade)
  exercise       Exercise       @relation(fields: [exerciseId], references: [id])

  @@unique([workoutHistoryId, exerciseId])
  @@map("workout_history_exercise")
}

model WorkoutTemplateExercise {
  id                String  @id @default(uuid()) @db.Uuid
  workoutTemplateId String  @db.Uuid
  exerciseId        String  @db.Uuid
  comment           String  @default("")
  minReps           Int[] // Fourchette min par série
  maxReps           Int[] // Fourchette max par série
  restTime          Int[] // Temps de repos en secondes
  order             Int     @default(1)
  supersetId        String? @db.Uuid

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  workoutTemplate WorkoutTemplate @relation(fields: [workoutTemplateId], references: [id], onDelete: Cascade)
  exercise        Exercise        @relation(fields: [exerciseId], references: [id])

  @@unique([workoutTemplateId, exerciseId])
  @@map("workout_template_exercise")
}

model Muscle {
  id            String @id @default(uuid()) @db.Uuid
  name          String
  muscleGroupId String @db.Uuid

  muscleGroup MuscleGroup @relation(fields: [muscleGroupId], references: [id])
  exercises   Exercise[]

  @@map("muscle")
}

model MuscleGroup {
  id      String   @id @default(uuid()) @db.Uuid
  name    String
  muscles Muscle[]

  @@map("muscle_group")
}

enum Role {
  admin
  user
}
