generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("NEXT_PUBLIC_POSTGRES_PRISMA_URL")
}

model Profile {
  id             String  @id @default(uuid()) @db.Uuid
  role           Role    @default(user)
  searchValue    String? @map("search_value")
  displayName    String? @map("display_name")
  firstName      String? @map("first_name")
  lastName       String? @map("last_name")
  username       String?
  profilePicture String? @map("profil_picture")

  followersCount Int @default(0)
  followingCount Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  workoutPrograms  WorkoutProgram[]
  workoutTemplates WorkoutTemplate[]
  exercises        Exercise[]
  WorkoutHistory   WorkoutHistory[]

  // Relations Follow
  following             Follow[]              @relation("UserFollowing")
  followers             Follow[]              @relation("UserFollowers")
  Like                  Like[]
  Comment               Comment[]
  CommentLike           CommentLike[]
  PushToken             PushToken[]
  receivedNotifications Notification[]        @relation("receverUser")
  createdNotifications  Notification[]        @relation("createrUser")
  ErrorLog              ErrorLog[]
  FailedClientRequest   FailedClientRequest[]

  @@map("profile")
}

model Follow {
  id          String   @id @default(uuid()) @db.Uuid
  followerId  String   @db.Uuid
  followingId String   @db.Uuid
  createdAt   DateTime @default(now())

  follower  Profile @relation("UserFollowing", fields: [followerId], references: [id], onDelete: Cascade)
  following Profile @relation("UserFollowers", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId]) // Empêcher le double follow
  @@map("follow")
}

model WorkoutProgram {
  id        String    @id @default(uuid()) @db.Uuid
  index     Int       @unique @default(autoincrement())
  name      String
  startDate DateTime?
  endDate   DateTime?
  ownerId   String    @db.Uuid

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  owner                Profile                         @relation(fields: [ownerId], references: [id])
  workoutHistory       WorkoutHistory[]
  workoutTemplateLinks WorkoutProgramWorkoutTemplate[]

  @@map("workout_program")
}

model WorkoutTemplate {
  id      String @id @default(uuid()) @db.Uuid
  name    String
  ownerId String @db.Uuid

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  owner               Profile                         @relation(fields: [ownerId], references: [id])
  workoutProgramLinks WorkoutProgramWorkoutTemplate[]
  exercises           WorkoutTemplateExercise[]
  workoutHistory      WorkoutHistory[]

  @@map("workout_template")
}

model WorkoutHistory {
  id                String   @id @default(uuid()) @db.Uuid
  date              DateTime @default(now())
  ownerId           String   @db.Uuid
  workoutTemplateId String?  @db.Uuid
  workoutProgramId  String?  @db.Uuid // Ajout de la référence au programme
  name              String   @default("Séance libre")
  comment           String?
  isPublic          Boolean  @default(false)
  workoutPlace      String?
  duration          Int?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now()) @updatedAt
  likesCount        Int      @default(0)
  commentsCount     Int      @default(0)

  owner           Profile                  @relation(fields: [ownerId], references: [id])
  workoutTemplate WorkoutTemplate?         @relation(fields: [workoutTemplateId], references: [id])
  workoutProgram  WorkoutProgram?          @relation(fields: [workoutProgramId], references: [id]) // Relation avec le programme
  exercises       WorkoutHistoryExercise[]
  Like            Like[]
  Comment         Comment[]

  @@map("workout_history")
}

model Like {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @db.Uuid
  postId    String   @db.Uuid
  createdAt DateTime @default(now())

  user Profile        @relation(fields: [userId], references: [id], onDelete: Cascade)
  post WorkoutHistory @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@map("like")
}

model CommentLike {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @db.Uuid
  commentId String   @db.Uuid
  createdAt DateTime @default(now())

  user    Profile @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([userId, commentId])
  @@map("comment_like")
}

model Comment {
  id         String   @id @default(uuid()) @db.Uuid
  postId     String   @db.Uuid
  userId     String   @db.Uuid
  parentId   String?  @db.Uuid
  content    String   @db.VarChar(2200)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
  likesCount Int      @default(0) // Ajout du compteur de likes sur les commentaires

  post    WorkoutHistory @relation(fields: [postId], references: [id], onDelete: Cascade)
  user    Profile        @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent  Comment?       @relation("CommentReplies", fields: [parentId], references: [id])
  replies Comment[]      @relation("CommentReplies")
  likes   CommentLike[]

  @@map("comment")
}

model Exercise {
  id       String   @id @default(uuid()) @db.Uuid
  name     String
  isPublic Boolean  @default(false)
  ownerId  String?  @db.Uuid // Null si c'est un exercice public
  tags     String[] @default([])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  owner            Profile?                  @relation(fields: [ownerId], references: [id])
  workoutTemplates WorkoutTemplateExercise[]
  workoutHistories WorkoutHistoryExercise[]
  muscles          Muscle[]

  @@map("exercise")
}

model WorkoutProgramWorkoutTemplate {
  id                String @id @default(uuid()) @db.Uuid
  workoutProgramId  String @db.Uuid
  workoutTemplateId String @db.Uuid
  order             Int    @default(1) //Ordre de la séance dans le program

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  workoutProgram  WorkoutProgram  @relation(fields: [workoutProgramId], references: [id], onDelete: Cascade)
  workoutTemplate WorkoutTemplate @relation(fields: [workoutTemplateId], references: [id], onDelete: Cascade)

  @@unique([workoutProgramId, workoutTemplateId])
  @@map("workout_program_workout_template")
}

model WorkoutHistoryExercise {
  id               String  @id @default(uuid()) @db.Uuid
  workoutHistoryId String  @db.Uuid
  exerciseId       String  @db.Uuid
  comment          String?
  nbReps           Int[]
  weight           Float[]
  minReps          Int[] // Fourchette min par série
  maxReps          Int[] // Fourchette max par série
  restTime         Int[] // Temps de repos en secondes
  order            Int     @default(1)
  supersetId       String? @db.Uuid

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  workoutHistory WorkoutHistory @relation(fields: [workoutHistoryId], references: [id], onDelete: Cascade)
  exercise       Exercise       @relation(fields: [exerciseId], references: [id])

  @@map("workout_history_exercise")
}

model WorkoutTemplateExercise {
  id                String  @id @default(uuid()) @db.Uuid
  workoutTemplateId String  @db.Uuid
  exerciseId        String  @db.Uuid
  comment           String  @default("")
  minReps           Int[] // Fourchette min par série
  maxReps           Int[] // Fourchette max par série
  restTime          Int[] // Temps de repos en secondes
  order             Int     @default(1)
  supersetId        String? @db.Uuid

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  workoutTemplate WorkoutTemplate @relation(fields: [workoutTemplateId], references: [id], onDelete: Cascade)
  exercise        Exercise        @relation(fields: [exerciseId], references: [id])

  @@map("workout_template_exercise")
}

model Muscle {
  id            String @id @default(uuid()) @db.Uuid
  name          String
  muscleGroupId String @db.Uuid

  muscleGroup MuscleGroup @relation(fields: [muscleGroupId], references: [id])
  exercises   Exercise[]

  @@map("muscle")
}

model MuscleGroup {
  id   String @id @default(uuid()) @db.Uuid
  name String

  muscles Muscle[]

  @@map("muscle_group")
}

model PushToken {
  id        String   @id @default(uuid())
  token     String   @unique
  profileId String   @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profile Profile @relation(fields: [profileId], references: [id])

  @@map("push_token")
}

model Notification {
  id        String           @id @default(uuid())
  userId    String           @db.Uuid
  createdBy String           @db.Uuid
  postId    String?          @db.Uuid //Pas de lien nécéssaire avec le reste, c'est uniquement pour groupe si bc de like
  type      NotificationType
  message   String
  data      Json
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())

  user        Profile  @relation(fields: [userId], references: [id], name: "receverUser")
  createruser Profile? @relation(fields: [createdBy], references: [id], name: "createrUser")

  @@map("notification")
}

model ErrorLog {
  id          Int        @id @default(autoincrement())
  createdAt   DateTime   @default(now())
  level       ErrorLevel
  message     String
  stackTrace  String     @map("stack_trace")
  endpoint    String?
  requestId   String?    @map("request_id")
  userId      String?    @map("user_id") @db.Uuid
  metadata    Json?
  environment String     @default("production")
  resolvedAt  DateTime?

  user Profile? @relation(fields: [userId], references: [id])

  @@index([createdAt])
  @@index([userId])
  @@index([level])
  @@map("error_log")
}

model FailedClientRequest {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  userId    String   @db.Uuid
  user      Profile  @relation(fields: [userId], references: [id])

  endpoint   String
  method     String
  data       Json?
  totalTry   Int
  lastTry    DateTime?
  appVersion String?
  deviceId   String?

  resolved   Boolean   @default(false)
  resolvedAt DateTime?
  notes      String?

  @@map("failed_client_request")
}

enum ErrorLevel {
  error
  warning
}

enum Role {
  admin
  user
}

enum NotificationType {
  like
  comment
  generic
  follow
}
